// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture3D <float4>    Automatum;

int                     width;
int                     height;
int                     depth;

int                     currentLayer;

float2 hash22(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

float Perlin(float2 p)
{
    float2 pi = floor(p);//Return the largest integer less than or equal to x.
    float2 pf = frac(p);//Returns the decimal part of the input value.

    //float2 w = pf * pf * (3.0 - 2.0 * pf);
    float2 w = pf * pf * pf * (6 * pf * pf - 15 * pf + 10);

    return lerp(lerp(dot(hash22(pi + float2(0.0, 0.0)), pf - float2(0.0, 0.0)),
        dot(hash22(pi + float2(1.0, 0.0)), pf - float2(1, 0.0)), w.x),
        lerp(dot(hash22(pi + float2(0.0, 1.0)), pf - float2(0.0, 1.0)),
            dot(hash22(pi + float2(1.0, 1.0)), pf - float2(1.0, 1.0)), w.x), w.y);
}

float random(float2 uv) {
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}


float RandomValue(float3 uvw) {
    return random(uvw.xz);
}

float3 RandomColor(float3 uvw) {
    return float3(random(uvw.xz), random(uvw.xz), random(uvw.xz));
}

float GetValue(float3 uvw) {
    return Automatum[uvw].w;
}

float3 GetColor(float3 uvw) {
    return Automatum[uvw].xyz;
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 uvw = id.xyz / float3(width, height, depth);

    float v = 0.0;
    float3 col = float3(0, 0, 0);
    
    if (currentLayer == 0) {
        v = RandomValue(uvw);
        col = RandomColor(uvw);
    }
    else {
        v = GetValue(uvw);
        col = GetColor(uvw);
    }

    v = RandomValue(uvw);
    col = RandomColor(uvw);

    id.y = currentLayer;
    
    Automatum[id] = float4(col,v);
}
